{"version":3,"sources":["PreserveDonationLink.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["PreserveDonationLinkStyles","createStyled","theme","link","textDecoration","root","margin","spacing","unit","maxWidth","textAlign","qrCode","marginBottom","media","name","PreserveDonationLink","_ref","href","react","_ref2","classes","className","Card_default","a","CardContent_default","lib_default","value","size","renderAs","Typography_default","variant","component","alt","src","logo","height","width","links","preserve","map","props","Object","objectWithoutProperties","react_default","createElement","src_PreserveDonationLink","assign","concat","qs","stringify","cause","donationtype","mode","AppStyles","display","flexWrap","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mSA4BMA,EAA6BC,YAjBA,SAACC,GAAD,MAAmB,CACpDC,KAAM,CACJC,eAAgB,QAElBC,KAAM,CACJC,OAA6B,EAArBJ,EAAMK,QAAQC,KACtBC,SAAU,IACVC,UAAW,UAEbC,OAAQ,CACNC,aAAmC,EAArBV,EAAMK,QAAQC,MAE9BK,MAAO,CACLH,UAAW,YAI6D,CAACI,KAAM,yBAuBpEC,EArBc,SAAAC,GAAA,IAAEF,EAAFE,EAAEF,KAAMG,EAARD,EAAQC,KAAR,OAC3BC,EAAA,cAAClB,EAAD,KACG,SAAAmB,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OACCF,EAAA,mBAAGD,KAAMA,EAAMI,UAAWD,EAAQjB,MAChCe,EAAA,cAACI,EAAAC,EAAD,CAAMF,UAAWD,EAAQf,MACvBa,EAAA,cAACM,EAAAD,EAAD,KACEL,EAAA,cAACO,EAAAF,EAAD,CAAQF,UAAWD,EAAQT,OAAQe,MAAOT,EAAMU,KAAM,IAAKC,SAAS,QACpEV,EAAA,cAACW,EAAAN,EAAD,CAAYO,QAAQ,aAAaC,UAAU,MAA3C,aAGAb,EAAA,cAACW,EAAAN,EAAD,CAAYO,QAAQ,WAAWC,UAAU,MACtCjB,GAEHI,EAAA,qBAAKc,IAAI,oCAAoCC,IAAKC,IAAMC,OAAQ,IAAKC,MAAO,6BClClFC,EAAQ,CACZ,CAACvB,KAAM,eAAgBwB,SAAU,eACjC,CAACxB,KAAM,4BAA6BwB,SAAU,cAC9C,CAACxB,KAAM,sCAAuCwB,SAAU,iBACxD,CAACxB,KAAM,wBAAyBwB,SAAU,UAC1C,CAACxB,KAAM,wBAAyBwB,SAAU,eAC1C,CAACxB,KAAM,2BAA4BwB,SAAU,aAC7C,CAACxB,KAAM,WAAYwB,SAAU,UAC7B,CAACxB,KAAM,6BAA8BwB,SAAU,eAC/C,CAACxB,KAAM,wBAAyBwB,SAAU,eAC1C,CAACxB,KAAM,0BAA2BwB,SAAU,aAC5C,CAACxB,KAAM,kBAAmBwB,SAAU,WACpCC,IAAI,SAAAvB,GAAA,IAAEsB,EAAFtB,EAAEsB,SAAaE,EAAfC,OAAAC,EAAA,EAAAD,CAAAzB,EAAA,qBACJ2B,EAAApB,EAAAqB,cAACC,EAADJ,OAAAK,OAAA,CACE7B,KAAI,gCAAA8B,OAAkCC,IAAGC,UAAU,CACjDC,MAAO,WACPZ,WACAa,aAAc,SACdC,KAAM,YAEJZ,MAWFa,EAAYpD,YAPA,SAACC,GAAD,MAAmB,CACnCG,KAAM,CACJiD,QAAS,OACTC,SAAU,UAI4B,CAACzC,KAAM,QAgBlC0C,mLAZX,OACEb,EAAApB,EAAAqB,cAACS,EAAD,KACG,SAAAlC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OACCuB,EAAApB,EAAAqB,cAAA,OAAKvB,UAAWD,EAAQf,MACrBgC,YANKoB,aChCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOrB,EAAApB,EAAAqB,cAACqB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.3ac0a055.chunk.js","sourcesContent":["import * as React from 'react'\nimport QRCode from 'qrcode.react'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport logo from './logo.png'\n\nimport createStyled from \"material-ui-render-props-styles\";\nimport type { Classes } from \"material-ui-render-props-styles\";\nimport type { Theme } from \"universal/theme\";\n\nconst preserveDonationLinkStyles = (theme: Theme) => ({\n  link: {\n    textDecoration: 'none',\n  },\n  root: {\n    margin: theme.spacing.unit * 2,\n    maxWidth: 250,\n    textAlign: 'center',\n  },\n  qrCode: {\n    marginBottom: theme.spacing.unit * 2,\n  },\n  media: {\n    textAlign: 'center',\n  },\n})\n\nconst PreserveDonationLinkStyles = createStyled(preserveDonationLinkStyles, {name: 'PreserveDonationLink'})\n\nconst PreserveDonationLink = ({name, href}) => (\n  <PreserveDonationLinkStyles>\n    {({classes}: {classes: Classes<typeof preserveDonationLinkStyles>}) => (\n      <a href={href} className={classes.link}>\n        <Card className={classes.root}>\n          <CardContent>\n            <QRCode className={classes.qrCode} value={href} size={190} renderAs=\"svg\" />\n            <Typography variant=\"subheading\" component=\"h3\">\n              Donate to\n            </Typography>\n            <Typography variant=\"headline\" component=\"h2\">\n              {name}\n            </Typography>\n            <img alt=\"Texas Cave Management Association\" src={logo} height={150} width={150} />\n          </CardContent>\n        </Card>\n      </a>\n    )}\n  </PreserveDonationLinkStyles>\n)\n\nexport default PreserveDonationLink\n","import React, { Component } from 'react';\nimport './App.css';\nimport PreserveDonationLink from './PreserveDonationLink'\nimport qs from 'qs'\n\nimport createStyled from \"material-ui-render-props-styles\";\nimport type { Classes } from \"material-ui-render-props-styles\";\nimport type { Theme } from \"universal/theme\";\n\nconst links = [\n  {name: 'Amazing Maze', preserve: 'amazingmaze'},\n  {name: 'Avery Ranch Cave Preserve', preserve: 'averyranch'},\n  {name: 'Deep & Punkin Caves Nature Preserve', preserve: 'deepandpunkin'},\n  {name: \"Ezell's Cave Preserve\", preserve: 'ezells'},\n  {name: \"Godwin Ranch Preserve\", preserve: 'godwinranch'},\n  {name: \"Lost Oasis Cave Preserve\", preserve: 'lostoasis'},\n  {name: \"O-9 Well\", preserve: 'o9well'},\n  {name: \"Robber Baron Cave Preserve\", preserve: 'robberbaron'},\n  {name: \"Rolling Oaks Preserve\", preserve: 'rollingoaks'},\n  {name: \"Whirlpool Cave Preserve\", preserve: 'whirlpool'},\n  {name: \"Wilcox Preserve\", preserve: 'wilcox'},\n].map(({preserve, ...props}) => (\n  <PreserveDonationLink\n    href={`https://tcmacaves.org/donate?${qs.stringify({\n      cause: 'preserve',\n      preserve,\n      donationtype: 'single',\n      mode: 'quick',\n    })}`}\n    {...props}\n  />\n))\n\nconst appStyles = (theme: Theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nconst AppStyles = createStyled(appStyles, {name: 'App'})\n\nclass App extends Component {\n  render() {\n    return (\n      <AppStyles>\n        {({classes}: {classes: Classes<typeof appStyles>}) => (\n          <div className={classes.root}>\n            {links}\n          </div>\n        )}\n      </AppStyles>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.126be299.png\";"],"sourceRoot":""}